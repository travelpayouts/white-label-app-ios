{# Macros #}
{%- macro localizedContainerArguments container %}
			fallback: "{{ container.localized[container.base] }}",
			storage: [
			{% for key, value in container.localized %}
				"{{ key }}": "{{ value }}",
			{% endfor %}
			]
{% endmacro -%}

{% macro screensArguments screensToDisplay %}
	{% for screen in screensToDisplay %}
		{% if screen.type == "other" %}
				.other(
					parameters: .init(
						icon: UIImage(named: "{{ screen.parameters.icon }}"),
						title: LocalizedStringContainer(
							{% call localizedContainerArguments screen.parameters.title %}
						),
						url: LocalizedUrlContainer(
							{% call localizedContainerArguments screen.parameters.url %}
						)
					)
				)
				{% ifnot forloop.last -%},{%- endif +%}
		{%- else %}
			{% if screen.type == "flights" %}
				.{{ screen.type }}
				{% ifnot forloop.last -%},{%- endif +%}
			{%- endif -%}
		{%- endif -%}
	{% endfor %}
{% endmacro -%}

{% set has_overridden_colors %}{{context.style.overridden_colors.ios and context.style.overridden_colors.ios.count > 0}}{% endset %}

{% set has_overridden_icons %}{{context.style.overridden_icons.ios and context.style.overridden_icons.ios.count > 0}}{% endset %}

{% set use_extended_appearance_configuration %}{{ has_overridden_icons == "true" }}{% endset %}

// This file was generated by project_configurator tool
// 
// DO NOT EDIT
//
// Copyright Â© {{ year }} CleverPumpkin. All rights reserved.

import UIKit
import WLConfig
import WLFlights
import WLInformation
import WLSupport

#if canImport(WLConfigUnlimited)
	import WLConfigUnlimited
#endif

#if canImport(WLDebug)
	import WLDebug
#endif

enum Configurator {

	// MARK: - Private static properties

	private static var isConfigurationWasComplete = false

	// MARK: - Internal static methods

	static func configure() {
		dispatchPrecondition(
			condition: .onQueue(.main)
		)

		guard !isConfigurationWasComplete else {
			return
		}

		// Localized containers

		let privacyUrlLocalizedContainer = LocalizedUrlContainer(
			{% call localizedContainerArguments context.constants.policy_url %}
		)

		let partnerUrlLocalizedContainer = LocalizedUrlContainer(
			{% call localizedContainerArguments context.info_screen_config.about_app_info.partner_url %}
		)

		let applicationDescriptionLocalizedContainer = LocalizedStringContainer(
			{% call localizedContainerArguments context.info_screen_config.about_app_info.description %}
		)

		let developerLocalizedContainer = LocalizedStringContainer(
			{% call localizedContainerArguments context.info_screen_config.about_app_info.developer %}
		)

		// White-Label configuration

		let applicationConstants = ApplicationConfiguration.Constants(
			{% if context.constants.appsflyer_dev_key  and context.constants.appsflyer_dev_key.count > 0 %}
			appsFlyerDevKey: "{{ context.constants.appsflyer_dev_key }}",
			{% else %}
			appsFlyerDevKey: nil,
			{% endif %}
			{% if context.advertising.appodeal_api_key and context.advertising.appodeal_api_key.count > 0 %}
			appodealApiKey: "{{ context.advertising.appodeal_api_key }}"
			{% else %}
			appodealApiKey: nil
			{% endif %}
		)

		let applicationConfiguration = ApplicationConfiguration(
			tabs: .init(
				{% call screensArguments context.white_label_config.screens_to_display %}
			),
			informationScreenConfiguration: InformationScreenConfiguration(
				optionalItemsToDisplay: [
				{% for item in context.info_screen_config.items_to_display %}
					.{{ item | snakeToCamelCase | lowerFirstLetter }}
					{%- ifnot forloop.last -%},{%- endif +%}
				{% endfor %}
				],
				aboutAppInformation: .init(
					description: applicationDescriptionLocalizedContainer,
					developer: developerLocalizedContainer,
					partnerUrl: partnerUrlLocalizedContainer
				)
			),
			constants: applicationConstants
		)

		ApplicationConfiguration.setup(with: applicationConfiguration)

		// Advertising Configuration

		{% if context.advertising.appodeal_api_key and context.advertising.appodeal_api_key.count > 0 %}
		let sdkAdvertisingConfiguration = Configuration.Advertising(
			advertisingProvider: AppodealAdvertisingProvider(),
			placements: .init(
				flights: .init(
					{% if context.advertising.placements.air_ticket_placement_interstitial and context.advertising.placements.air_ticket_placement_interstitial.count > 0 %}
						searchInterstitial: "{{ context.advertising.placements.air_ticket_placement_interstitial }}",
					{% else %}
						searchInterstitial: nil,
					{% endif %}
					{% if context.advertising.placements.air_ticket_placement_banner and context.advertising.placements.air_ticket_placement_banner.count > 0 %}
						searchResultsBanner: "{{ context.advertising.placements.air_ticket_placement_banner }}"
					{% else %}
						searchResultsBanner: nil
					{% endif %}
				)
			)
		)
		{% else %}
		let sdkAdvertisingConfiguration: Configuration.Advertising? = nil
		{% endif %}

		// Analytics Configuration

		let sdkAnalyticsConfiguration = Configuration.Analytics(
			analyticsProvider: FirebaseAnalyticsProvider()
		)

		// SDK Configuration

		let configuration = Configuration(
			appearance: Appearance(),
			constants: .init(
				marker: "{{ context.constants.marker }}",
				clientDeviceHost: "{{ context.constants.client_device_host }}",
				apiKey: "{{ context.constants.api_key }}",
				appStoreId: "{{ context.constants.appstore_id }}",
				privacyUrl: privacyUrlLocalizedContainer,
				feedbackEmail: "{{ context.constants.feedback_email }}",
				{% if context.constants.feedback_theme %}
					feedbackTheme: "{{ context.constants.feedback_theme }}",
				{% else %}
					feedbackTheme: nil,
				{% endif %}
				{% if context.constants.sharing_data.sharing_link %}
					sharingLink: "{{ context.constants.sharing_data.sharing_link }}",
				{% else %}
					sharingLink: nil,
				{% endif %}
				{% if context.base_configuration.booking_review_request_frequency %}
					bookingReviewRequestFrequency: {{ context.base_configuration.booking_review_request_frequency }},
				{% else %}
					bookingReviewRequestFrequency: 0,
				{% endif %}
				appStoreLink: "{{ context.constants.app_store_link }}"
			),
			advertising: sdkAdvertisingConfiguration,
			analytics: sdkAnalyticsConfiguration
		)

		WhiteLabel.configure(with: configuration)

		if applicationConfiguration.tabsToDisplay.contains(.flights) {
			WLFlights.ScreenProvider.shared.enable()
		}

		isConfigurationWasComplete = true
	}
}

// MARK: - Fileprivate types

private extension Configurator {
	{% if use_extended_appearance_configuration == "true" %}
	struct Appearance: UnlimitedVersionAppearanceConfiguration {
	{% else %}
	struct Appearance: BaseVersionAppearanceConfiguration {
	{% endif %}
	
		// MARK: - Fileprivate properties
		
		var baseColorVariant: ColorVariant? {
			debugAppearance?.baseColorVariant ?? .hex("{{ context.style.base_color }}")
		}
		
		var iconStyle: IconStyle {
			debugAppearance?.iconStyle ?? .{{ context.style.icons_type | snakeToCamelCase | lowerFirstLetter }}
		}
		
		var cornerStyle: CornerStyle {
			debugAppearance?.cornerStyle ?? .{{ context.style.corners_type | snakeToCamelCase | lowerFirstLetter }}
		}
		
		var palette: ColorPalette {
			{% if context.style.palette and context.style.palette.count > 0 %}
			debugAppearance?.palette ?? .{{ context.style.palette | snakeToCamelCase | lowerFirstLetter }}
			{% else %}
			debugAppearance?.palette ?? .default
			{% endif %}
		}
		{% if has_overridden_colors == "true" %}
		
		var overriddenColors: ColorSet? {
			OverriddenColorSet()
		}
		{% endif %}
		{% if has_overridden_icons == "true" %}
		
		var overriddenIcons: IconSet? {
			OverriddenIconSet()
		}
		{% endif %}
		
		// MARK: - Private properties
		
		private var debugAppearance: AppearanceConfiguration? {
			#if canImport(WLDebug)
				WLDebug.Debug.overriddenAppearance
			#else
				nil
			#endif
		}
	}
}
{% if has_overridden_colors == "true" %}

private extension Configurator {
	struct OverriddenColorSet: ColorSet {
		
		// MARK: - Fileprivate properties
		
	{% for key, value in context.style.overridden_colors.ios %}
		var {{ key | snakeToCamelCase | lowerFirstLetter }}: Color? {
			.custom(
				.init(
					lightHex: "{{ value.light }}",
					darkHex: "{{ value.dark }}"
				)
			)
		}
		{% ifnot forloop.last %}
		
		{% endif %}
	{% endfor %}
	}
}
{% endif %}
{% if has_overridden_icons == "true" %}

private extension Configurator {
	struct OverriddenIconSet: IconSet {
		
		// MARK: - Fileprivate properties
		
	{% for key, value in context.style.overridden_icons.ios %}
		var {{ key | snakeToCamelCase | lowerFirstLetter }}: UIImage? {
			.init(named: "{{ value }}")
		}
		{% ifnot forloop.last %}
		
		{% endif %}
	{% endfor %}
	}
}
{% endif %}
